{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismitrakhovich/Documents/burger-app/burger-app/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from \"react\";\nimport Aux from \"../../hoc/Aux\";\nimport Burger from \"../../components/Burger/Burger\";\nimport BuildControls from \"../../components/Burger/BuildControls/BuildControls\";\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        salad: 0,\n        bacon: 0,\n        cheese: 0,\n        meat: 0\n      },\n      totalPrice: 4,\n      purchasable: false\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(ingKey => {\n        return ingredients[ingKey];\n      }).reduce((sum, element) => {\n        return sum + element;\n      }, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const newPrice = this.state.totalPrice + INGREDIENT_PRICES[type];\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const newPrice = this.state.totalPrice - INGREDIENT_PRICES[type];\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n  }\n\n  render() {\n    const disableInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disableInfo) {\n      disableInfo[key] = disableInfo[key] <= 0;\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(BuildControls, {\n      ingredientAdded: this.addIngredientHandler,\n      ingredientRemoved: this.removeIngredientHandler,\n      disabled: disableInfo,\n      purchasable: this.state.purchasable,\n      price: this.state.totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/Users/dzianismitrakhovich/Documents/burger-app/burger-app/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","updatePurchaseState","sum","Object","keys","map","ingKey","reduce","element","setState","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","newPrice","removeIngredientHandler","render","disableInfo","key"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Aux from \"../../hoc/Aux\";\nimport Burger from \"../../components/Burger/Burger\";\nimport BuildControls from \"../../components/Burger/BuildControls/BuildControls\";\n\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7,\n};\n\nclass BurgerBuilder extends Component {\n  state = {\n    ingredients: {\n      salad: 0,\n      bacon: 0,\n      cheese: 0,\n      meat: 0,\n    },\n    totalPrice: 4,\n    purchasable: false,\n  };\n\n  updatePurchaseState = (ingredients) => {\n    const sum = Object.keys(ingredients)\n      .map((ingKey) => {\n        return ingredients[ingKey];\n      })\n      .reduce((sum, element) => {\n        return sum + element;\n      }, 0);\n    this.setState({ purchasable: sum > 0 });\n  };\n\n  addIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type];\n    const updatedCount = oldCount + 1;\n    const updatedIngredients = {\n      ...this.state.ingredients,\n    };\n    updatedIngredients[type] = updatedCount;\n    const newPrice = this.state.totalPrice + INGREDIENT_PRICES[type];\n    this.setState({ totalPrice: newPrice, ingredients: updatedIngredients });\n    this.updatePurchaseState(updatedIngredients);\n  };\n\n  removeIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type];\n    if (oldCount <= 0) {\n      return;\n    }\n    const updatedCount = oldCount - 1;\n    const updatedIngredients = {\n      ...this.state.ingredients,\n    };\n    updatedIngredients[type] = updatedCount;\n    const newPrice = this.state.totalPrice - INGREDIENT_PRICES[type];\n    this.setState({ totalPrice: newPrice, ingredients: updatedIngredients });\n    this.updatePurchaseState(updatedIngredients);\n  };\n\n  render() {\n    const disableInfo = {\n      ...this.state.ingredients,\n    };\n    for (let key in disableInfo) {\n      disableInfo[key] = disableInfo[key] <= 0;\n    }\n    return (\n      <Aux>\n        <div>\n          <Burger ingredients={this.state.ingredients} />\n        </div>\n\n        <BuildControls\n          ingredientAdded={this.addIngredientHandler}\n          ingredientRemoved={this.removeIngredientHandler}\n          disabled={disableInfo}\n          purchasable={this.state.purchasable}\n          price={this.state.totalPrice}\n        />\n      </Aux>\n    );\n  }\n}\n\nexport default BurgerBuilder;\n"]},"metadata":{},"sourceType":"module"}