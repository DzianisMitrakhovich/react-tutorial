{"ast":null,"code":"var _jsxFileName = \"/Users/dzianismitrakhovich/Documents/burger-app/burger-app/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        salad: 0,\n        bacon: 0,\n        cheese: 0,\n        meat: 0\n      },\n      totalPrice: 4,\n      purchasable: false\n    };\n\n    this.updatePurchaseStae = () => {\n      const ingredients = { ...this.state.ingredients\n      };\n      const sum = Object.keys(ingredients).map(ingKey => {\n        return ingredients[ingKey];\n      }).reduce((sum, element) => {\n        return sum + element;\n      }, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const newPrice = this.state.totalPrice + INGREDIENT_PRICES[type];\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const newPrice = this.state.totalPrice - INGREDIENT_PRICES[type];\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n    };\n  }\n\n  render() {\n    const disableInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disableInfo) {\n      disableInfo[key] = disableInfo[key] <= 0;\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(BuildControls, {\n      ingredientAdded: this.addIngredientHandler,\n      ingredientRemoved: this.removeIngredientHandler,\n      disabled: disableInfo,\n      price: this.state.totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/Users/dzianismitrakhovich/Documents/burger-app/burger-app/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","updatePurchaseStae","sum","Object","keys","map","ingKey","reduce","element","setState","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","newPrice","removeIngredientHandler","render","disableInfo","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,aAAP,MAA0B,qDAA1B;AAEA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAE,GADe;AAEtBC,EAAAA,MAAM,EAAE,GAFc;AAGtBC,EAAAA,IAAI,EAAE,GAHgB;AAItBC,EAAAA,KAAK,EAAE;AAJe,CAA1B;;AAOA,MAAMC,aAAN,SAA4BT,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAElCU,KAFkC,GAE1B;AACJC,MAAAA,WAAW,EAAE;AACTN,QAAAA,KAAK,EAAE,CADE;AAETG,QAAAA,KAAK,EAAE,CAFE;AAGTF,QAAAA,MAAM,EAAE,CAHC;AAITC,QAAAA,IAAI,EAAE;AAJG,OADT;AAOJK,MAAAA,UAAU,EAAE,CAPR;AAQJC,MAAAA,WAAW,EAAE;AART,KAF0B;;AAAA,SAalCC,kBAbkC,GAab,MAAM;AACvB,YAAMH,WAAW,GAAG,EAChB,GAAG,KAAKD,KAAL,CAAWC;AADE,OAApB;AAGA,YAAMI,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYN,WAAZ,EACXO,GADW,CACPC,MAAM,IAAI;AACX,eAAOR,WAAW,CAACQ,MAAD,CAAlB;AACH,OAHW,EAIXC,MAJW,CAIJ,CAACL,GAAD,EAAMM,OAAN,KAAkB;AACtB,eAAON,GAAG,GAAGM,OAAb;AACH,OANW,EAMT,CANS,CAAZ;AAOA,WAAKC,QAAL,CAAc;AAACT,QAAAA,WAAW,EAAEE,GAAG,GAAG;AAApB,OAAd;AACH,KAzBiC;;AAAA,SA2BlCQ,oBA3BkC,GA2BVC,IAAD,IAAU;AAC7B,YAAMC,QAAQ,GAAG,KAAKf,KAAL,CAAWC,WAAX,CAAuBa,IAAvB,CAAjB;AACA,YAAME,YAAY,GAAGD,QAAQ,GAAG,CAAhC;AACA,YAAME,kBAAkB,GAAG,EACvB,GAAG,KAAKjB,KAAL,CAAWC;AADS,OAA3B;AAGAgB,MAAAA,kBAAkB,CAACH,IAAD,CAAlB,GAA2BE,YAA3B;AACA,YAAME,QAAQ,GAAG,KAAKlB,KAAL,CAAWE,UAAX,GAAwBR,iBAAiB,CAACoB,IAAD,CAA1D;AACA,WAAKF,QAAL,CACI;AAACV,QAAAA,UAAU,EAAEgB,QAAb;AAAuBjB,QAAAA,WAAW,EAAEgB;AAApC,OADJ;AAGH,KAtCiC;;AAAA,SAwClCE,uBAxCkC,GAwCPL,IAAD,IAAU;AAChC,YAAMC,QAAQ,GAAG,KAAKf,KAAL,CAAWC,WAAX,CAAuBa,IAAvB,CAAjB;;AACA,UAAIC,QAAQ,IAAI,CAAhB,EAAmB;AACf;AACH;;AACD,YAAMC,YAAY,GAAGD,QAAQ,GAAG,CAAhC;AACA,YAAME,kBAAkB,GAAG,EACvB,GAAG,KAAKjB,KAAL,CAAWC;AADS,OAA3B;AAGAgB,MAAAA,kBAAkB,CAACH,IAAD,CAAlB,GAA2BE,YAA3B;AACA,YAAME,QAAQ,GAAG,KAAKlB,KAAL,CAAWE,UAAX,GAAwBR,iBAAiB,CAACoB,IAAD,CAA1D;AACA,WAAKF,QAAL,CACI;AAACV,QAAAA,UAAU,EAAEgB,QAAb;AAAuBjB,QAAAA,WAAW,EAAEgB;AAApC,OADJ;AAGH,KAtDiC;AAAA;;AAwDlCG,EAAAA,MAAM,GAAG;AACL,UAAMC,WAAW,GAAG,EAChB,GAAG,KAAKrB,KAAL,CAAWC;AADE,KAApB;;AAGA,SAAK,IAAIqB,GAAT,IAAgBD,WAAhB,EAA6B;AACzBA,MAAAA,WAAW,CAACC,GAAD,CAAX,GAAmBD,WAAW,CAACC,GAAD,CAAX,IAAoB,CAAvC;AACH;;AACD,wBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,KAAKtB,KAAL,CAAWC,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAKQ,oBAAC,aAAD;AACA,MAAA,eAAe,EAAE,KAAKY,oBADtB;AAEA,MAAA,iBAAiB,EAAE,KAAKM,uBAFxB;AAGA,MAAA,QAAQ,EAAEE,WAHV;AAIA,MAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWE,UAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALR,CADJ;AAaH;;AA5EiC;;AA+EtC,eAAeH,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 0.4,\n    meat: 1.3,\n    bacon: 0.7\n}\n\nclass BurgerBuilder extends Component {\n\n    state = {\n        ingredients: {\n            salad: 0,\n            bacon: 0,\n            cheese: 0,\n            meat: 0\n        },\n        totalPrice: 4,\n        purchasable: false\n    }\n\n    updatePurchaseStae = () => {\n        const ingredients = {\n            ...this.state.ingredients\n        };\n        const sum = Object.keys(ingredients)\n        .map(ingKey => {\n            return ingredients[ingKey]\n        })\n        .reduce((sum, element) => {\n            return sum + element\n        }, 0);\n        this.setState({purchasable: sum > 0});\n    }\n\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const newPrice = this.state.totalPrice + INGREDIENT_PRICES[type];\n        this.setState(\n            {totalPrice: newPrice, ingredients: updatedIngredients}\n        )\n    }\n\n    removeIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        if (oldCount <= 0) {\n            return;\n        }\n        const updatedCount = oldCount - 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const newPrice = this.state.totalPrice - INGREDIENT_PRICES[type];\n        this.setState(\n            {totalPrice: newPrice, ingredients: updatedIngredients}\n        )\n    }\n\n    render() {\n        const disableInfo = {\n            ...this.state.ingredients\n        };\n        for (let key in disableInfo) {\n            disableInfo[key] = disableInfo[key] <= 0\n        }\n        return (\n            <Aux>\n                <div>\n                    <Burger ingredients={this.state.ingredients}/>\n                </div>\n            \n                    <BuildControls \n                    ingredientAdded={this.addIngredientHandler}\n                    ingredientRemoved={this.removeIngredientHandler}\n                    disabled={disableInfo}\n                    price={this.state.totalPrice}/>\n            </Aux>\n        )\n    }\n}\n\nexport default BurgerBuilder\n"]},"metadata":{},"sourceType":"module"}